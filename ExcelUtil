import org.apache.commons.lang3.StringUtils;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.web.multipart.MultipartFile;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import javax.servlet.http.HttpServletResponse;
import cn.afterturn.easypoi.excel.ExcelExportUtil;
import cn.afterturn.easypoi.excel.ExcelImportUtil;
import cn.afterturn.easypoi.excel.entity.ExportParams;
import cn.afterturn.easypoi.excel.entity.ImportParams;
import cn.afterturn.easypoi.excel.entity.enmus.ExcelType;

public class ExcelUtil {

    /**
     * 导出 xlsx文件 大数据量简单数据结构 大于1w
     *
     * @param title     表名
     * @param sheetName sheet名
     * @param fileName  文件名
     * @param list      数据集
     * @param pojoClass 数据集 类型
     * @param response  response
     * @throws GlobalException 异常
     */
    public static void exportXSSFExcel(String title, String sheetName, String fileName, List<?> list, Class<?> pojoClass, HttpServletResponse response) throws GlobalException {
        ExportParams exportParams = new ExportParams(title, sheetName, ExcelType.XSSF);
        fileName += ".xlsx";
        defaultExport(list, pojoClass, fileName, response, exportParams);
    }

    /**
     * 导出 xls文件 小数据量 小于1w
     *
     * @param title     表名
     * @param sheetName sheet名
     * @param fileName  文件名
     * @param list      数据集
     * @param pojoClass 数据集 类型
     * @param response  response
     * @throws GlobalException 异常
     */
    public static void exportHSSFExcel(String title, String sheetName, String fileName, List<?> list, Class<?> pojoClass, HttpServletResponse response) throws GlobalException {
        ExportParams exportParams = new ExportParams(title, sheetName, ExcelType.HSSF);
        fileName += ".xls";
        defaultExport(list, pojoClass, fileName, response, exportParams);
    }

    /**
     * 导出 复杂结构类型数据
     *
     * @param fileName 文件名
     * @param list     数据集
     * @param response response
     * @throws GlobalException 异常
     */
    public static void exportComplexExcel(String fileName, List<Map<String, Object>> list, HttpServletResponse response) throws GlobalException {
        defaultExport(list, fileName, response);
    }

    /**
     * 导出大数据量 Excel
     *
     * @param title     表名
     * @param sheetName sheet名
     * @param fileName  文件名
     * @param list      数据集
     * @param pojoClass 数据集 类型
     * @param response  response
     * @throws GlobalException 异常
     */
    public static void exportBigDataExcel(String title, String sheetName, String fileName, List<?> list, Class<?> pojoClass, HttpServletResponse response) throws GlobalException {
        ExportParams exportParams = new ExportParams(title, sheetName);
        fileName += ".xlsx";
        defaultBigDataExport(list, pojoClass, fileName, response, exportParams);
    }

    private static void defaultExport(List<?> list, Class<?> pojoClass, String fileName, HttpServletResponse response, ExportParams exportParams) throws GlobalException {
        Workbook workbook = ExcelExportUtil.exportExcel(exportParams, pojoClass, list);
        if (workbook != null) {
            downLoadExcel(fileName, response, workbook);
        }
    }

    private static void defaultExport(List<Map<String, Object>> list, String fileName, HttpServletResponse response) throws GlobalException {
        Workbook workbook = ExcelExportUtil.exportExcel(list, ExcelType.HSSF);
        if (workbook != null) {
            downLoadExcel(fileName, response, workbook);
        }
    }

    private static void defaultBigDataExport(List<?> list, Class<?> pojoClass, String fileName, HttpServletResponse response, ExportParams exportParams) throws GlobalException {
        // 可以依照实际情况进行优化 如 10000条数据时，每1000条执行一次
        // workbook = ExcelExportUtil.exportBigExcel(exportParams, pojoClass, list);
        Workbook workbook = ExcelExportUtil.exportBigExcel(exportParams, pojoClass, list);
        ExcelExportUtil.closeExportBigExcel();
        if (workbook != null) {
            downLoadExcel(fileName, response, workbook);
        }
    }

    private static void downLoadExcel(String fileName, HttpServletResponse response, Workbook workbook) throws GlobalException {
        try {
            fileName = java.net.URLEncoder.encode(fileName, "UTF-8");
            response.setContentType("application/vnd.ms-excel;charset=UTF-8");
            response.setHeader("Content-disposition", "attachment; filename=" + fileName);
            response.setHeader("Pragma", "No-cache");
            writeToOs(workbook, response);
        } catch (IOException e) {
            throw new GlobalException(ResultCode.ERROR_FILE_PROCESSING.getCode(),ResultCode.ERROR_FILE_PROCESSING.getMsg());
        }
    }

    public static <T> List<T> importExcel(String filePath, Integer titleRows, Integer headerRows, Class<T> pojoClass) throws GlobalException {
        if (StringUtils.isBlank(filePath)) {
            return null;
        }
        ImportParams params = new ImportParams();
        params.setTitleRows(titleRows);
        params.setHeadRows(headerRows);
        List<T> list;
        try {
            list = ExcelImportUtil.importExcel(new File(filePath), pojoClass, params);
        } catch (NoSuchElementException e) {
            throw new GlobalException(ResultCode.ERROR_FILE_TEMPLATE_EMPTY.getCode(),ResultCode.ERROR_FILE_TEMPLATE_EMPTY.getMsg());
        } catch (Exception e) {
            e.printStackTrace();
            throw new GlobalException(ResultCode.ERROR_FILE_PROCESSING.getCode(),ResultCode.ERROR_FILE_PROCESSING.getMsg());
        }
        return list;
    }

    public static <T> List<T> importExcel(MultipartFile file, Integer titleRows, Integer headerRows, Class<T> pojoClass) throws GlobalException {
        if (file == null) {
            return null;
        }
        ImportParams params = new ImportParams();
        params.setTitleRows(titleRows);
        params.setHeadRows(headerRows);
        List<T> list;
        try {
            list = ExcelImportUtil.importExcel(file.getInputStream(), pojoClass, params);
        } catch (NoSuchElementException e) {
            throw new GlobalException(ResultCode.ERROR_FILE_EXCEL_EMPTY.getCode(),ResultCode.ERROR_FILE_EXCEL_EMPTY.getMsg());
        } catch (Exception e) {
            throw new GlobalException(ResultCode.ERROR_FILE_PROCESSING.getCode(),ResultCode.ERROR_FILE_PROCESSING.getMsg());
        }
        return list;
    }

    /**
     * 写入到流中
     */
    public static void writeToOs(Workbook workbook, HttpServletResponse response) {
        OutputStream os = null;
        try {
            if (workbook != null) {
                os = response.getOutputStream();
                workbook.write(os);
                os.flush();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                if (os != null) {
                    os.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

}
